{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","limpiarHoraPrevia","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","classList","add","removeEventListener","seleccionarHora","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","remove","addEventListener","obtenerHorasDisponibles","json","body","buscarEventos","horaPrevia","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponentePrevio","ponente","ponenteId","respuesta","arrayPonentes","nombre","trim","apellido","id","formatearPonentes","obtenerPonentes","length","expresion","RegExp","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","onclick","appendChild","sinResultados","mostrarPonentes","tagsInput","tags","tagsDiv","tagsInputHidden","mostrarTags","tag","nuevaTag","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\r\n    // Selecciona el elemento con id=horas\r\n    const horas = document.querySelector('#horas');\r\n\r\n    // Ejecuta el siguiente código sólo si existe ese elemento\r\n    if (horas) {\r\n        let busqueda = {\r\n            categoria_id: '',\r\n            dia: ''\r\n        };\r\n\r\n        // Selecciona el campo de categoría\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        // Selecciona los radio buttons\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        // Selecciona el input hidden para asignarle un value\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        // Selecciona el input hidden para asignarle un value\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n\r\n        // Asigna el evento para el cambio del select\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n\r\n        // Asigna el evento para el cambio del radio\r\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n\r\n        function terminoBusqueda(e) {\r\n            // Llena el día en el objeto de busqueda con el valor del día\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            // Reinicia los campos ocultos y el selector de horas\r\n            limpiarHoraPrevia();\r\n\r\n            // Previene la ejecución del siguiente código si aún no está lleno el objeto\r\n            if (Object.values(busqueda).includes('')) {\r\n                return;\r\n            }\r\n\r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            const { dia, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n\r\n            obtenerHorasDisponibles(eventos.body);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // Reinicia las Horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => {\r\n                // Agrega las clase de horas deshabilitadas\r\n                li.classList.add('horas__hora--deshabilitada')\r\n                // Remueve los eventos listener previos\r\n                li.removeEventListener('click', seleccionarHora);\r\n            });\r\n\r\n            // Crea un array con las horas ya tomadas\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            // Convierte el listadoHoras a un Array para poder usar filter\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n            // Filtra el listado de horas y obtiene las horas que no han sido tomadas\r\n            const horasDisponibles = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n\r\n            horasDisponibles.forEach(li => {\r\n                // Remueve la clase de hora deshabilitada\r\n                li.classList.remove('horas__hora--deshabilitada');\r\n                // Agrega evento click a las horas disponibles\r\n                li.addEventListener('click', seleccionarHora);\r\n            });\r\n\r\n            //const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n            //horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n            // Remueve la Clase se seleccionada cuando hay un nuevo click\r\n            limpiarHoraPrevia();\r\n\r\n            // Agrega clase se Seleccionada\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n            // Agrega el id de la hora al input oculto\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            // Agrega el id del día al input oculto\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n\r\n        function limpiarHoraPrevia() {\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n            // Remueve la Clase se seleccionada cuando hay un nuevo click\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n        }\r\n\r\n    }\r\n})();","(function () {\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if (ponentesInput) {\r\n\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        obtenerPonentes();\r\n\r\n        ponentesInput.addEventListener('input', buscarPonentes);\r\n\r\n        async function obtenerPonentes() {\r\n            const url = `/api/ponentes`\r\n\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            formatearPonentes(resultado.body);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            });\r\n        }\r\n\r\n        function buscarPonentes(e) {\r\n            const busqueda = e.target.value;\r\n            // Busca a partir de 3 caracteres\r\n            if (busqueda.length >= 3) {\r\n                // Expresión regular para buscar un patrón de letras sin importar mayúsculas y minúsculas \r\n                const expresion = new RegExp(busqueda, \"i\");\r\n\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    if (ponente.nombre.toLowerCase().search(expresion) != -1) {\r\n                        return ponente;\r\n                    }\r\n                });\r\n            } else {\r\n                // Limpia los ponentes filtrados al estar vacío el campo de búsqueda\r\n                ponentesFiltrados = [];\r\n            }\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes() {\r\n\r\n            // Limpia los ponentes antes de mostrar la búsqueda\r\n            while (listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n            // Elimina el id del ponente seleccionado anteriormente del input hidden\r\n            ponenteHidden.value = '';\r\n\r\n            // Si encuentra ponentes filtrados crea el html para mostrarlos\r\n            if (ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n\r\n                    // Añade el elemento creado al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Muestra mensaje si no encuentra ponentes filtrados\r\n            const sinResultados = document.createElement('P');\r\n            sinResultados.classList.add('listado-ponentes__sin-resultado');\r\n            sinResultados.textContent = 'No hay resultados para tu búsqueda';\r\n            // Añade el elemento creado al DOM\r\n            listadoPonentes.appendChild(sinResultados);\r\n        }\r\n\r\n        function seleccionarPonente(e) {\r\n            // Remueve la clase previa de seleccionado\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if (ponentePrevio)\r\n                ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado');\r\n\r\n            const ponente = e.target;\r\n            // Agraga la clase seleccionado al ponente\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            // Agrega el id del ponente seleccionado al input hidden\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function () {\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    // Previene la ejecución del código si no encuentra el elemento de tags\r\n    if (!tagsInput) {\r\n        return;\r\n    }\r\n\r\n    let tags = [];\r\n    const tagsDiv = document.querySelector('#tags');\r\n    const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n    // Recupera Tags del input oculto\r\n    if (tagsInputHidden.value !== '') {\r\n        tags = tagsInputHidden.value.split(',');\r\n        mostrarTags();\r\n    }\r\n\r\n    // Escucha los cambios del input\r\n    tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n    function guardarTag(e) {\r\n        // Verifica si fue presionada la coma (,) con su Key Code 44\r\n        if (e.keyCode === 44) {\r\n            // Previene la ejecución del código si solo se ingresan espacios en blanco\r\n            if (e.target.value.trim() === '' || e.target.value < 1) {\r\n                return;\r\n            }\r\n\r\n            // Previene que la coma (,) se ingrese al value del input\r\n            e.preventDefault();\r\n\r\n            // Crea una copia del array de tags y agrega la nueva tag\r\n            tags = [...tags, e.target.value.trim()];\r\n\r\n            // Limpia el Value del input\r\n            tagsInput.value = '';\r\n\r\n            // Actualiza el listado de tags\r\n            mostrarTags();\r\n        }\r\n    }\r\n\r\n    function mostrarTags() {\r\n        tagsDiv.textContent = '';\r\n        tags.forEach(tag => {\r\n            const nuevaTag = document.createElement('LI');\r\n            nuevaTag.classList.add('formulario__tag');\r\n            nuevaTag.textContent = tag;\r\n            nuevaTag.ondblclick = eliminarTag;\r\n            tagsDiv.appendChild(nuevaTag);\r\n        });\r\n\r\n        actualizarInputHidden();\r\n    }\r\n\r\n    function eliminarTag(e) {\r\n        e.target.remove();\r\n        tags = tags.filter(tag => tag !== e.target.textContent);\r\n        actualizarInputHidden();\r\n    }\r\n\r\n    function actualizarInputHidden() {\r\n        tagsInputHidden.value = tags.toString();\r\n    }\r\n\r\n})();"]}