{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","listadoHoras","categoriaActual","diaActual","horaActual","terminoBusqueda","e","target","name","value","limpiarHoraPrevia","Object","values","includes","buscarEventos","async","url","resultado","fetch","eventos","forEach","li","classList","add","removeEventListener","seleccionarHora","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","remove","addEventListener","obtenerHorasDisponibles","json","body","horaSeleccionada","mostrarHoraActual","horaPrevia","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","idPonenteActual","mostrarPonentes","firstChild","removeChild","length","ponente","ponenteHTML","createElement","textContent","nombre","ponenteId","id","onclick","seleccionarPonente","appendChild","sinResultados","ponentePrevio","respuesta","arrayPonentes","trim","apellido","formatearPonentes","obtenerPonentes","ponenteActual","idActual","mostrarPonenteActual","expresion","RegExp","toLowerCase","search","tagsInput","tags","tagsDiv","tagsInputHidden","mostrarTags","tag","nuevaTag","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\r\n    // Selecciona el elemento con id=horas\r\n    const horas = document.querySelector('#horas');\r\n\r\n    // Ejecuta el siguiente código sólo si existe ese elemento\r\n    if (horas) {\r\n        let busqueda = {\r\n            categoria_id: '',\r\n            dia: ''\r\n        };\r\n\r\n        // Selecciona el campo de categoría\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        // Selecciona los radio buttons\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        // Selecciona el input hidden para asignarle un value\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        // Selecciona el input hidden para asignarle un value\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n        // Selecciona el listado de todas las Horas\r\n        const listadoHoras = document.querySelectorAll('#horas li');\r\n\r\n\r\n        // Para valores originales si el usuario está Editando un Evento\r\n        let categoriaActual = '';\r\n        let diaActual = '';\r\n        let horaActual = '';\r\n\r\n        // Al iniciar la página Verifica si alguno de los inputs ya tiene un valor\r\n        // Esto significa que el usuario está editando el Evento\r\n        if (categoria.value || inputHiddenDia.value || inputHiddenHora.value) {\r\n            // Guarda los valores actuales de los inputs al momento de Editar un Evento\r\n            // para preservar los valores originales\r\n            categoriaActual = categoria.value;\r\n            diaActual = inputHiddenDia.value;\r\n            horaActual = inputHiddenHora.value;\r\n\r\n            // Asigna los Valores originales al arreglo de busqueda\r\n            busqueda.categoria_id = categoriaActual;\r\n            busqueda.dia = diaActual;\r\n\r\n            // Busca las Horas ocupadas con Eventos\r\n            buscarEventos();\r\n        }\r\n\r\n\r\n        // Asigna el evento para el cambio del select\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n\r\n        // Asigna el evento para el cambio del radio\r\n        dias.forEach(dia => {\r\n            dia.addEventListener('change', terminoBusqueda);\r\n            dia.addEventListener('change', () => {\r\n                // Asigna el valor al input oculto de día\r\n                inputHiddenDia.value = dia.value;\r\n            });\r\n        });\r\n\r\n        function terminoBusqueda(e) {\r\n            // Llena el día en el objeto de busqueda con el valor del día\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            // Reinicia los campos ocultos y el selector de horas\r\n            limpiarHoraPrevia();\r\n\r\n            // Previene la ejecución del siguiente código si aún no está lleno el objeto\r\n            if (Object.values(busqueda).includes('')) {\r\n                return;\r\n            }\r\n\r\n            buscarEventos();\r\n        }\r\n\r\n        async function buscarEventos() {\r\n            const { dia, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n\r\n            obtenerHorasDisponibles(eventos.body);\r\n\r\n            mostrarHoraActual();\r\n        }\r\n\r\n        function mostrarHoraActual() {\r\n            // Verifica si el usuario está en la misma categoría y el mismo día\r\n            // que provienen del servidor al momento de Editar\r\n            if (categoria.value === categoriaActual && inputHiddenDia.value === diaActual) {\r\n                // Asigna la Hora Actual del Evento que se está editando\r\n                const horaSeleccionada = document.querySelector(`[data-hora-id=\"${horaActual}\"]`);\r\n\r\n                // Modifica las clases del LI\r\n                horaSeleccionada.classList.remove('horas__hora--deshabilitada');\r\n                horaSeleccionada.classList.add('horas__hora--seleccionada');\r\n\r\n                // Agrega evento click a las hora Seleccionada\r\n                horaSeleccionada.addEventListener('click', seleccionarHora);\r\n\r\n                // Asiga el ID de la hora actual al Input oculto\r\n                inputHiddenHora.value = horaSeleccionada.dataset.horaId;\r\n            }\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // Reinicia las Horas\r\n            listadoHoras.forEach(li => {\r\n                // Agrega las clase de horas deshabilitadas\r\n                li.classList.add('horas__hora--deshabilitada')\r\n                // Remueve los eventos listener previos\r\n                li.removeEventListener('click', seleccionarHora);\r\n            });\r\n\r\n            // Crea un array con las horas ya tomadas\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            // Convierte el listadoHoras a un Array para poder usar filter\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n            // Filtra el listado de horas y obtiene las horas que no han sido tomadas\r\n            const horasDisponibles = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n\r\n            horasDisponibles.forEach(li => {\r\n                // Remueve la clase de hora deshabilitada\r\n                li.classList.remove('horas__hora--deshabilitada');\r\n                // Agrega evento click a las horas disponibles\r\n                li.addEventListener('click', seleccionarHora);\r\n            });\r\n\r\n            //const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitada)');\r\n            //horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n            // Remueve la Clase se seleccionada cuando hay un nuevo click\r\n            limpiarHoraPrevia();\r\n\r\n            // Agrega clase se Seleccionada\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n            // Agrega el id de la hora al input oculto\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            // Agrega el id del día al input oculto\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n\r\n        function limpiarHoraPrevia() {\r\n            inputHiddenHora.value = '';\r\n            // Remueve la Clase de seleccionada cuando hay un nuevo click\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if (horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n        }\r\n\r\n    }\r\n})();","(function () {\r\n    const ponentesInput = document.querySelector('#ponentes');\r\n\r\n    if (ponentesInput) {\r\n\r\n        let ponentes = [];\r\n        let ponentesFiltrados = [];\r\n\r\n        const listadoPonentes = document.querySelector('#listado-ponentes');\r\n        const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\r\n\r\n        // Guarda\r\n        const idPonenteActual = ponenteHidden.value;\r\n\r\n        (async function () {\r\n            // Detiene la ejecución del código hasta que termina de ejecutar obtenerPonentes()\r\n            await obtenerPonentes();\r\n\r\n            if (idPonenteActual)\r\n                mostrarPonenteActual();\r\n        })();\r\n\r\n        ponentesInput.addEventListener('input', buscarPonentes);\r\n\r\n        function mostrarPonenteActual() {\r\n            const ponenteActual = ponentes.filter(ponente => {\r\n                return ponente.id === ponenteHidden.value\r\n            });\r\n\r\n            ponentesFiltrados = ponenteActual;\r\n\r\n            mostrarPonentes();\r\n\r\n            const idActual = ponenteActual[0].id;\r\n            const ponenteActualLI = document.querySelector(`[data-ponente-id=\"${idActual}\"]`);\r\n\r\n            seleccionarPonente(ponenteActualLI);\r\n        }\r\n\r\n        async function obtenerPonentes() {\r\n            const url = `/api/ponentes`\r\n\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            formatearPonentes(resultado.body);\r\n        }\r\n\r\n        function formatearPonentes(arrayPonentes = []) {\r\n            ponentes = arrayPonentes.map(ponente => {\r\n                return {\r\n                    nombre: `${ponente.nombre.trim()} ${ponente.apellido.trim()}`,\r\n                    id: ponente.id\r\n                }\r\n            });\r\n        }\r\n\r\n        function buscarPonentes(e) {\r\n            const busqueda = e.target.value;\r\n            // Busca a partir de 3 caracteres\r\n            if (busqueda.length >= 3) {\r\n                // Expresión regular para buscar un patrón de letras sin importar mayúsculas y minúsculas \r\n                const expresion = new RegExp(busqueda, \"i\");\r\n\r\n                ponentesFiltrados = ponentes.filter(ponente => {\r\n                    if (ponente.nombre.toLowerCase().search(expresion) != -1) {\r\n                        return ponente;\r\n                    }\r\n                });\r\n            } else {\r\n                // Limpia los ponentes filtrados al estar vacío el campo de búsqueda\r\n                ponentesFiltrados = [];\r\n            }\r\n            mostrarPonentes();\r\n        }\r\n\r\n        function mostrarPonentes() {\r\n\r\n            // Limpia los ponentes antes de mostrar la búsqueda\r\n            while (listadoPonentes.firstChild) {\r\n                listadoPonentes.removeChild(listadoPonentes.firstChild);\r\n            }\r\n            // Elimina el id del ponente seleccionado anteriormente del input hidden\r\n            ponenteHidden.value = '';\r\n\r\n            // Si encuentra ponentes filtrados crea el html para mostrarlos\r\n            if (ponentesFiltrados.length > 0) {\r\n                ponentesFiltrados.forEach(ponente => {\r\n                    const ponenteHTML = document.createElement('LI');\r\n                    ponenteHTML.classList.add('listado-ponentes__ponente');\r\n                    ponenteHTML.textContent = ponente.nombre;\r\n                    ponenteHTML.dataset.ponenteId = ponente.id;\r\n                    ponenteHTML.onclick = seleccionarPonente;\r\n\r\n                    // Si el usuario está editando, al encontrar el ponente que ya está asignado\r\n                    // agrega la clase de seleccionado y su id de ponente al input oculto\r\n                    if (ponente.id === idPonenteActual) {\r\n                        ponenteHTML.classList.add('listado-ponentes__ponente--seleccionado');\r\n                        ponenteHidden.value = ponente.id;\r\n                    }\r\n\r\n                    // Añade el elemento creado al DOM\r\n                    listadoPonentes.appendChild(ponenteHTML);\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Muestra mensaje si no encuentra ponentes filtrados\r\n            const sinResultados = document.createElement('P');\r\n            sinResultados.classList.add('listado-ponentes__sin-resultado');\r\n            sinResultados.textContent = 'No hay resultados para tu búsqueda';\r\n            // Añade el elemento creado al DOM\r\n            listadoPonentes.appendChild(sinResultados);\r\n        }\r\n\r\n        function seleccionarPonente(e) {\r\n            // Remueve la clase previa de seleccionado\r\n            const ponentePrevio = document.querySelector('.listado-ponentes__ponente--seleccionado');\r\n            if (ponentePrevio)\r\n                ponentePrevio.classList.remove('listado-ponentes__ponente--seleccionado');\r\n\r\n            // si e.target no existe entonces utiliza e \r\n            const ponente = e.target || e;\r\n\r\n            // Agraga la clase seleccionado al ponente\r\n            ponente.classList.add('listado-ponentes__ponente--seleccionado');\r\n\r\n            // Agrega el id del ponente seleccionado al input hidden\r\n            ponenteHidden.value = ponente.dataset.ponenteId;\r\n        }\r\n    }\r\n})();","(function () {\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    // Previene la ejecución del código si no encuentra el elemento de tags\r\n    if (!tagsInput) {\r\n        return;\r\n    }\r\n\r\n    let tags = [];\r\n    const tagsDiv = document.querySelector('#tags');\r\n    const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n    // Recupera Tags del input oculto\r\n    if (tagsInputHidden.value !== '') {\r\n        tags = tagsInputHidden.value.split(',');\r\n        mostrarTags();\r\n    }\r\n\r\n    // Escucha los cambios del input\r\n    tagsInput.addEventListener('keypress', guardarTag);\r\n\r\n    function guardarTag(e) {\r\n        // Verifica si fue presionada la coma (,) con su Key Code 44\r\n        if (e.keyCode === 44) {\r\n            // Previene la ejecución del código si solo se ingresan espacios en blanco\r\n            if (e.target.value.trim() === '' || e.target.value < 1) {\r\n                return;\r\n            }\r\n\r\n            // Previene que la coma (,) se ingrese al value del input\r\n            e.preventDefault();\r\n\r\n            // Crea una copia del array de tags y agrega la nueva tag\r\n            tags = [...tags, e.target.value.trim()];\r\n\r\n            // Limpia el Value del input\r\n            tagsInput.value = '';\r\n\r\n            // Actualiza el listado de tags\r\n            mostrarTags();\r\n        }\r\n    }\r\n\r\n    function mostrarTags() {\r\n        tagsDiv.textContent = '';\r\n        tags.forEach(tag => {\r\n            const nuevaTag = document.createElement('LI');\r\n            nuevaTag.classList.add('formulario__tag');\r\n            nuevaTag.textContent = tag;\r\n            nuevaTag.ondblclick = eliminarTag;\r\n            tagsDiv.appendChild(nuevaTag);\r\n        });\r\n\r\n        actualizarInputHidden();\r\n    }\r\n\r\n    function eliminarTag(e) {\r\n        e.target.remove();\r\n        tags = tags.filter(tag => tag !== e.target.textContent);\r\n        actualizarInputHidden();\r\n    }\r\n\r\n    function actualizarInputHidden() {\r\n        tagsInputHidden.value = tags.toString();\r\n    }\r\n\r\n})();"]}